name: Health Check & Monitoring

on:
  schedule:
    # Run every 15 minutes
    - cron: '*/15 * * * *'
  workflow_dispatch:

env:
  TARGET_HOST: localhost

jobs:
  health-check:
    runs-on: ubuntu-latest
    
    steps:
    - name: Check Backend Health
      id: backend-health
      run: |
        response=$(curl -s -o /dev/null -w "%{http_code}" http://${{ env.TARGET_HOST }}:8080/health || echo "000")
        if [ "$response" != "200" ]; then
          echo "Backend health check failed with status: $response"
          echo "status=failed" >> $GITHUB_OUTPUT
          exit 1
        else
          echo "Backend is healthy"
          echo "status=healthy" >> $GITHUB_OUTPUT
        fi

    - name: Check Frontend Health
      id: frontend-health
      run: |
        response=$(curl -s -o /dev/null -w "%{http_code}" http://${{ env.TARGET_HOST }} || echo "000")
        if [ "$response" != "200" ]; then
          echo "Frontend health check failed with status: $response"
          echo "status=failed" >> $GITHUB_OUTPUT
          exit 1
        else
          echo "Frontend is healthy"
          echo "status=healthy" >> $GITHUB_OUTPUT
        fi

    - name: Check Database Connectivity
      run: |
        # Test database connectivity through backend API
        response=$(curl -s -o /dev/null -w "%{http_code}" http://${{ env.TARGET_HOST }}:8080/api/v1/health/db || echo "000")
        if [ "$response" != "200" ]; then
          echo "Database connectivity check failed"
          exit 1
        else
          echo "Database connectivity is healthy"
        fi

    - name: Performance Test
      run: |
        # Simple performance test
        response_time=$(curl -s -o /dev/null -w "%{time_total}" http://${{ env.TARGET_HOST }}:8080/api/v1/projects)
        echo "API response time: ${response_time}s"
        
        # Check if response time is acceptable (less than 2 seconds)
        if (( $(echo "$response_time > 2.0" | bc -l) )); then
          echo "Warning: API response time is slow (${response_time}s)"
        fi

    - name: Notify on Failure
      if: failure()
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        channel: '#alerts'
        text: |
          ðŸš¨ Health Check Failed!
          Target: ${{ env.TARGET_HOST }}
          Backend: ${{ steps.backend-health.outputs.status }}
          Frontend: ${{ steps.frontend-health.outputs.status }}
          Time: ${{ github.run_started_at }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  disk-space-check:
    runs-on: ubuntu-latest
    
    steps:
    - name: Check Disk Space
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ env.TARGET_HOST }}
        username: ${{ secrets.SSH_USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        port: ${{ secrets.SSH_PORT || 22 }}
        script: |
          # Check disk usage
          df -h
          
          # Check if disk usage is above 80%
          usage=$(df / | tail -1 | awk '{print $5}' | sed 's/%//')
          if [ "$usage" -gt 80 ]; then
            echo "Warning: Disk usage is at ${usage}%"
            exit 1
          fi
          
          # Check Docker disk usage
          docker system df
          
          # Clean up old Docker images if space is low
          if [ "$usage" -gt 70 ]; then
            echo "Cleaning up old Docker images..."
            docker image prune -f
            docker container prune -f
          fi

  security-check:
    runs-on: ubuntu-latest
    
    steps:
    - name: SSL Certificate Check
      run: |
        # Check SSL certificate if HTTPS is enabled
        if curl -k -s https://${{ env.TARGET_HOST }} > /dev/null 2>&1; then
          expiry=$(echo | openssl s_client -servername ${{ env.TARGET_HOST }} -connect ${{ env.TARGET_HOST }}:443 2>/dev/null | openssl x509 -noout -dates | grep notAfter | cut -d= -f2)
          echo "SSL Certificate expires: $expiry"
          
          # Check if certificate expires within 30 days
          expiry_epoch=$(date -d "$expiry" +%s)
          current_epoch=$(date +%s)
          days_until_expiry=$(( ($expiry_epoch - $current_epoch) / 86400 ))
          
          if [ $days_until_expiry -lt 30 ]; then
            echo "Warning: SSL certificate expires in $days_until_expiry days"
          fi
        fi

    - name: Port Security Check
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ env.TARGET_HOST }}
        username: ${{ secrets.SSH_USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        port: ${{ secrets.SSH_PORT || 22 }}
        script: |
          # Check for unexpected open ports
          netstat -tuln | grep LISTEN
          
          # Check firewall status
          sudo ufw status || echo "UFW not installed or configured"
          
          # Check for failed login attempts
          sudo grep "Failed password" /var/log/auth.log | tail -10 || echo "No recent failed login attempts"
