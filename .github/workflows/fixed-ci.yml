name: Fixed CI Pipeline

on:
  push:
    branches: [ staging, develop ]
  pull_request:
    branches: [ main, staging, develop ]

jobs:
  # Backend testing
  backend-test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.23'
    
    - name: Test backend compilation
      working-directory: ./backend
      run: |
        echo "📦 Downloading Go dependencies..."
        go mod download
        echo "🔨 Building backend..."
        go build -o /tmp/main ./cmd/simple_main.go
        echo "✅ Backend compiles successfully!"

  # Frontend testing  
  frontend-test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Test frontend build
      working-directory: ./frontend
      run: |
        echo "📦 Installing frontend dependencies..."
        npm install
        echo "🔨 Building frontend..."
        npm run build
        echo "✅ Frontend builds successfully!"
        ls -la dist/

  # Docker testing
  docker-test:
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]
    steps:
    - uses: actions/checkout@v4
    
    - name: Test backend Docker build
      working-directory: ./backend
      run: |
        echo "🐳 Building backend Docker image..."
        docker build -t test-backend .
        echo "✅ Backend Docker build successful!"
    
    - name: Test frontend Docker build
      working-directory: ./frontend
      run: |
        echo "🐳 Building frontend Docker image..."
        docker build -t test-frontend .
        echo "✅ Frontend Docker build successful!"

  # Simple integration test
  integration-test:
    runs-on: ubuntu-latest
    needs: [docker-test]
    steps:
    - uses: actions/checkout@v4
    
    - name: Run integration test
      run: |
        # Build images first
        docker build -t test-backend ./backend
        docker build -t test-frontend ./frontend
        
        # Create simple test setup
        echo "🚀 Starting test environment..."
        
        # Test backend standalone first
        echo "Testing backend..."
        docker run -d --name test-backend-container -p 8080:8080 test-backend
        sleep 10
        
        # Test if backend responds
        if curl -f http://localhost:8080/health; then
          echo "✅ Backend health check passed!"
        else
          echo "❌ Backend health check failed"
          docker logs test-backend-container
        fi
        
        # Test frontend standalone
        echo "Testing frontend..."
        docker run -d --name test-frontend-container -p 3000:80 test-frontend
        sleep 5
        
        if curl -f http://localhost:3000; then
          echo "✅ Frontend serves content!"
        else
          echo "❌ Frontend test failed"
          docker logs test-frontend-container
        fi
        
        # Cleanup
        docker stop test-backend-container test-frontend-container || true
        docker rm test-backend-container test-frontend-container || true
        
        echo "🎉 Integration tests completed!"

  # Final summary
  summary:
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test, docker-test, integration-test]
    if: always()
    steps:
    - name: Generate summary
      run: |
        echo "## 🎯 CI Pipeline Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Component | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Backend Test | ${{ needs.backend-test.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Frontend Test | ${{ needs.frontend-test.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Docker Test | ${{ needs.docker-test.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Integration Test | ${{ needs.integration-test.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "**Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        if [[ "${{ needs.backend-test.result }}" == "success" && "${{ needs.frontend-test.result }}" == "success" && "${{ needs.docker-test.result }}" == "success" && "${{ needs.integration-test.result }}" == "success" ]]; then
          echo "🎉 **ALL TESTS PASSED!** 🎉" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **SOME TESTS FAILED** - Check logs above" >> $GITHUB_STEP_SUMMARY
        fi
