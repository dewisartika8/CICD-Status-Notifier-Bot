// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/dewisartika8/cicd-status-notifier-bot/internal/core/project/port (interfaces: ProjectService)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/dewisartika8/cicd-status-notifier-bot/internal/core/project/domain"
	dto "github.com/dewisartika8/cicd-status-notifier-bot/internal/core/project/dto"
	value_objects "github.com/dewisartika8/cicd-status-notifier-bot/internal/core/shared/domain/value_objects"
)

// MockProjectService is a mock of ProjectService interface.
type MockProjectService struct {
	ctrl     *gomock.Controller
	recorder *MockProjectServiceMockRecorder
}

// MockProjectServiceMockRecorder is the mock recorder for MockProjectService.
type MockProjectServiceMockRecorder struct {
	mock *MockProjectService
}

// NewMockProjectService creates a new mock instance.
func NewMockProjectService(ctrl *gomock.Controller) *MockProjectService {
	mock := &MockProjectService{ctrl: ctrl}
	mock.recorder = &MockProjectServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProjectService) EXPECT() *MockProjectServiceMockRecorder {
	return m.recorder
}

// ActivateProject mocks base method.
func (m *MockProjectService) ActivateProject(arg0 context.Context, arg1 value_objects.ID) (*domain.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActivateProject", arg0, arg1)
	ret0, _ := ret[0].(*domain.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ActivateProject indicates an expected call of ActivateProject.
func (mr *MockProjectServiceMockRecorder) ActivateProject(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActivateProject", reflect.TypeOf((*MockProjectService)(nil).ActivateProject), arg0, arg1)
}

// ArchiveProject mocks base method.
func (m *MockProjectService) ArchiveProject(arg0 context.Context, arg1 value_objects.ID) (*domain.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ArchiveProject", arg0, arg1)
	ret0, _ := ret[0].(*domain.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ArchiveProject indicates an expected call of ArchiveProject.
func (mr *MockProjectServiceMockRecorder) ArchiveProject(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ArchiveProject", reflect.TypeOf((*MockProjectService)(nil).ArchiveProject), arg0, arg1)
}

// CreateProject mocks base method.
func (m *MockProjectService) CreateProject(arg0 context.Context, arg1 dto.CreateProjectRequest) (*domain.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProject", arg0, arg1)
	ret0, _ := ret[0].(*domain.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProject indicates an expected call of CreateProject.
func (mr *MockProjectServiceMockRecorder) CreateProject(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProject", reflect.TypeOf((*MockProjectService)(nil).CreateProject), arg0, arg1)
}

// DeactivateProject mocks base method.
func (m *MockProjectService) DeactivateProject(arg0 context.Context, arg1 value_objects.ID) (*domain.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeactivateProject", arg0, arg1)
	ret0, _ := ret[0].(*domain.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeactivateProject indicates an expected call of DeactivateProject.
func (mr *MockProjectServiceMockRecorder) DeactivateProject(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeactivateProject", reflect.TypeOf((*MockProjectService)(nil).DeactivateProject), arg0, arg1)
}

// DeleteProject mocks base method.
func (m *MockProjectService) DeleteProject(arg0 context.Context, arg1 value_objects.ID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProject", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProject indicates an expected call of DeleteProject.
func (mr *MockProjectServiceMockRecorder) DeleteProject(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProject", reflect.TypeOf((*MockProjectService)(nil).DeleteProject), arg0, arg1)
}

// GetActiveProjects mocks base method.
func (m *MockProjectService) GetActiveProjects(arg0 context.Context) ([]*domain.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActiveProjects", arg0)
	ret0, _ := ret[0].([]*domain.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActiveProjects indicates an expected call of GetActiveProjects.
func (mr *MockProjectServiceMockRecorder) GetActiveProjects(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveProjects", reflect.TypeOf((*MockProjectService)(nil).GetActiveProjects), arg0)
}

// GetProject mocks base method.
func (m *MockProjectService) GetProject(arg0 context.Context, arg1 value_objects.ID) (*domain.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProject", arg0, arg1)
	ret0, _ := ret[0].(*domain.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProject indicates an expected call of GetProject.
func (mr *MockProjectServiceMockRecorder) GetProject(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProject", reflect.TypeOf((*MockProjectService)(nil).GetProject), arg0, arg1)
}

// GetProjectByName mocks base method.
func (m *MockProjectService) GetProjectByName(arg0 context.Context, arg1 string) (*domain.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjectByName", arg0, arg1)
	ret0, _ := ret[0].(*domain.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjectByName indicates an expected call of GetProjectByName.
func (mr *MockProjectServiceMockRecorder) GetProjectByName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectByName", reflect.TypeOf((*MockProjectService)(nil).GetProjectByName), arg0, arg1)
}

// GetProjectByRepositoryURL mocks base method.
func (m *MockProjectService) GetProjectByRepositoryURL(arg0 context.Context, arg1 string) (*domain.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjectByRepositoryURL", arg0, arg1)
	ret0, _ := ret[0].(*domain.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjectByRepositoryURL indicates an expected call of GetProjectByRepositoryURL.
func (mr *MockProjectServiceMockRecorder) GetProjectByRepositoryURL(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectByRepositoryURL", reflect.TypeOf((*MockProjectService)(nil).GetProjectByRepositoryURL), arg0, arg1)
}

// GetProjectsWithTelegramChat mocks base method.
func (m *MockProjectService) GetProjectsWithTelegramChat(arg0 context.Context) ([]*domain.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjectsWithTelegramChat", arg0)
	ret0, _ := ret[0].([]*domain.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjectsWithTelegramChat indicates an expected call of GetProjectsWithTelegramChat.
func (mr *MockProjectServiceMockRecorder) GetProjectsWithTelegramChat(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectsWithTelegramChat", reflect.TypeOf((*MockProjectService)(nil).GetProjectsWithTelegramChat), arg0)
}

// ListProjects mocks base method.
func (m *MockProjectService) ListProjects(arg0 context.Context, arg1 dto.ListProjectFilters) ([]*domain.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProjects", arg0, arg1)
	ret0, _ := ret[0].([]*domain.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProjects indicates an expected call of ListProjects.
func (mr *MockProjectServiceMockRecorder) ListProjects(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProjects", reflect.TypeOf((*MockProjectService)(nil).ListProjects), arg0, arg1)
}

// UpdateProject mocks base method.
func (m *MockProjectService) UpdateProject(arg0 context.Context, arg1 value_objects.ID, arg2 dto.UpdateProjectRequest) (*domain.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProject", arg0, arg1, arg2)
	ret0, _ := ret[0].(*domain.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProject indicates an expected call of UpdateProject.
func (mr *MockProjectServiceMockRecorder) UpdateProject(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProject", reflect.TypeOf((*MockProjectService)(nil).UpdateProject), arg0, arg1, arg2)
}

// UpdateProjectStatus mocks base method.
func (m *MockProjectService) UpdateProjectStatus(arg0 context.Context, arg1 value_objects.ID, arg2 domain.ProjectStatus) (*domain.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProjectStatus", arg0, arg1, arg2)
	ret0, _ := ret[0].(*domain.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProjectStatus indicates an expected call of UpdateProjectStatus.
func (mr *MockProjectServiceMockRecorder) UpdateProjectStatus(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProjectStatus", reflect.TypeOf((*MockProjectService)(nil).UpdateProjectStatus), arg0, arg1, arg2)
}
